(/opt/carnd_p3/behavioral) root@ab70564d4946:/home/workspace/CarND-Behavioral-Cloning-P3/lenet_data# python ../model.py -m lenet -d ../data
Using TensorFlow backend.
Training data will be taken from:  ../data
Output file is  model_lenet  +.h5
Please confirm with "Y"!  :: Y
1 directory as input data found.
../data
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
cropping2d_1 (Cropping2D)    (None, 50, 280, 3)        0         
_________________________________________________________________
lambda_1 (Lambda)            (None, 50, 280, 3)        0         
_________________________________________________________________
dropout_1 (Dropout)          (None, 50, 280, 3)        0         
_________________________________________________________________
conv2d_1 (Conv2D)            (None, 48, 278, 12)       336       
_________________________________________________________________
max_pooling2d_1 (MaxPooling2 (None, 24, 139, 12)       0         
_________________________________________________________________
conv2d_2 (Conv2D)            (None, 22, 137, 32)       3488      
_________________________________________________________________
max_pooling2d_2 (MaxPooling2 (None, 11, 68, 32)        0         
_________________________________________________________________
flatten_1 (Flatten)          (None, 23936)             0         
_________________________________________________________________
dropout_2 (Dropout)          (None, 23936)             0         
_________________________________________________________________
dense_1 (Dense)              (None, 120)               2872440   
_________________________________________________________________
batch_normalization_1 (Batch (None, 120)               480       
_________________________________________________________________
dense_2 (Dense)              (None, 84)                10164     
_________________________________________________________________
dense_3 (Dense)              (None, 1)                 85        
=================================================================
Total params: 2,886,993
Trainable params: 2,886,753
Non-trainable params: 240
_________________________________________________________________
Start training with data from directory:  ../data
Epoch 1/10
2019-08-10 23:14:30.822389: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.
2019-08-10 23:14:30.822473: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.
2019-08-10 23:14:30.822524: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.
2019-08-10 23:14:30.822582: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX2 instructions, but these are available on your machine and could speed up CPU computations.
2019-08-10 23:14:30.822602: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use FMA instructions, but these are available on your machine and could speed up CPU computations.
2019-08-10 23:14:30.933614: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:893] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2019-08-10 23:14:30.935411: I tensorflow/core/common_runtime/gpu/gpu_device.cc:955] Found device 0 with properties: 
name: Tesla K80
major: 3 minor: 7 memoryClockRate (GHz) 0.8235
pciBusID 0000:00:04.0
Total memory: 11.17GiB
Free memory: 11.05GiB
2019-08-10 23:14:30.936711: I tensorflow/core/common_runtime/gpu/gpu_device.cc:976] DMA: 0 
2019-08-10 23:14:30.936891: I tensorflow/core/common_runtime/gpu/gpu_device.cc:986] 0:   Y 
2019-08-10 23:14:30.936965: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1045] Creating TensorFlow device (/gpu:0) -> (device: 0, name: Tesla K80, pci bus id: 0000:00:04.0)
603/603 [==============================] - 93s 154ms/step - loss: 0.0471 - val_loss: 0.0257

Epoch 00001: saving model to .//checkpoints-8-10-23-0001-01-01 00:00:00-29/model.ckpt
Epoch 2/10
603/603 [==============================] - 84s 140ms/step - loss: 0.0233 - val_loss: 0.0202

Epoch 00002: saving model to .//checkpoints-8-10-23-0001-01-01 00:00:00-29/model.ckpt
Epoch 3/10
603/603 [==============================] - 85s 140ms/step - loss: 0.0201 - val_loss: 0.0176

Epoch 00003: saving model to .//checkpoints-8-10-23-0001-01-01 00:00:00-29/model.ckpt
Epoch 4/10
603/603 [==============================] - 84s 139ms/step - loss: 0.0181 - val_loss: 0.0185

Epoch 00004: saving model to .//checkpoints-8-10-23-0001-01-01 00:00:00-29/model.ckpt
Epoch 5/10
603/603 [==============================] - 84s 140ms/step - loss: 0.0165 - val_loss: 0.0179

Epoch 00005: saving model to .//checkpoints-8-10-23-0001-01-01 00:00:00-29/model.ckpt
Epoch 00005: early stopping
dict_keys(['loss', 'val_loss'])

